const router = require("express").Router();
const {check } = require ('express-validator');
const getOneEvent = require("../controllers/FindOneEvent");
const getAllEvents = require("../controllers/FindAllEvents");
const updateEvent = require("../controllers/UpateEvent");
const createEvent = require("../controllers/CreateEvent");
const deleteEvent = require("../controllers/DeleteEvent");

/**
 * @swagger
 * components:
 *  schemas:
 *   Event:
 *    type: object
 *    required:
 *     - title
 *     - speakers
 *     - category
 *     - description
 *     - media
 *     - partners
 *   properties:
 *    id: 
 *     type: string
 *     description: This is the autogenerated id of the event
 *   title: 
 *      type: string
 *      description: This is the event title
 *   speakers:
 *      type: string
 *      description: This is the event speakers
 *   category:
 *      type: string
 *      description: This is the event categories
 *   description:
 *      type: string
 *      description: This gives the event description
 *   media:
 *      type: image
 *      description: Event poster
 *   partners:
 *      type: string
 *      description: This is a list of event partners
 * example:
 *   id: event12
 *   title: jycon KE
 *   speakers: Paullaster Okoth
 *   category: Web Development
 *   description: Come join us as we demistify web development in JavaScript
 *   media: image
 *   partners: Google, Microsoft
 * 
 */

/**
 * @swagger
 * tags:
 *  name: Events
 *  description: Event management API
 */


/**
 * @swagger
 * /api:
 *  get:
 *     summary: Return the list of all events
 *     tags: [Events]
 *     responses:
 *       200:
 *        description: The list of events
 *        content:
 *          application/json:
 *              schema:
 *                type: array
 *                items:
 *                 $ref: '#/components/schemas/Event'
 */
router.get("/events/all", getAllEvents);

/**
 * @swagger
 * /api/{id}:
 *  put:
 *   summary: Update event by  id
 *   tags: [Events]
 *   parameters:
 *    - in: path
 *      name: id
 *      schema: 
 *        type: string
 *        required: true
 *        description: This is the event id
 *   requestBody:
 *     required: true
 *     content:
 *       application/json:
 *         schema:
 *           $ref: '#/components/schemas/Event'
 *   reponses:
 *    200:
 *     description: The event was updated
 *     content:
 *      application/json:
 *         schema:
 *           $ref: '#/components/schemas/Event'
 *    404:
 *     description: the event was not found
 *   500:
 *     description: Server error occurred when updating the event!
 */

router.put("/events/:id", [
    check ('title').not ().isEmpty ().escape ().withMessage ('Invalid title'),
    check ('speakers').not ().isEmpty ().escape ().withMessage ('Invalid speaker details!'),
    check ('category').not ().isEmpty ().escape ().withMessage ('Invalid category'),
    check ('description').not ().isEmpty ().escape ().withMessage ('Invalid description'),
    check ('media').not ().isEmpty ().withMessage ('Invalid media'),
    check ('sponsors').not ().isEmpty ().escape ().withMessage ('Invalid sponsor details!'),
    check ( 'partners').not ().isEmpty ().escape ().withMessage ( 'Invalid partner details!')
],updateEvent);

/**
 * @swagger
 * /api:
 *  post:
 *   summary: Create a new event
 *   tags: [Events]
 *   requestBody:
 *      required: true
 *      content:
 *        application/json:
 *           schema: 
 *             $ref: '#/components/schemas/Event'
 *   reponses:
 *    200:
 *     description: The event was successfully created
 *     content:
 *      application/json:
 *         schema:
 *           $ref: '#/components/schemas/Event'
 *   500:
 *     description: Server error occurred when creating the event
 */

router.post("/events/create", [
    check ( 'title').not ().isEmpty ().escape ().withMessage ( 'Invalid event title'),
],createEvent);

/**
 * @swagger
 * /api/{id}:
 *  get:
 *   summary: Find event by id
 *   tags: [Events]
 *   parameters:
 *    - in: path
 *      name: id
 *      schema: 
 *        type: string
 *        required: true
 *        description: This is the event id
 *   reponses:
 *    200:
 *     description: The event description by id
 *     content:
 *      application/json:
 *         schema:
 *           $ref: '#/components/schemas/Event'
 *   404:
 *     description:  The event was not found!
 */

router.get("/events/:id", getOneEvent);

/**
 * @swagger
 * /api/{id}:
 *  delete:
 *   summary: Remove the event by id
 *   tags: [Events]
 *   parameters:
 *    - in: path
 *      name: id
 *      schema: 
 *        type: string
 *        required: true
 *        description: This is the event id
 *   reponses:
 *    200:
 *     description: The event was successfully deleted
 *     content:
 *      application/json:
 *         schema:
 *           $ref: '#/components/schemas/Event'
 *    404:
 *     description: The event was not found!
 *   500:
 *     description: Server error occurred when deleting the event!
 */

router.delete("/events/:id", deleteEvent);

module.exports = router;
